setwd("/Users/alessio/Desktop/T4C Course/corso/class 3/data/PCA")
knitr::opts_chunk$set(echo = TRUE)
# Step 1: Load the dataset
pottery<-read.csv(file="pottery.csv", header = TRUE, sep = ",")
setwd("/Users/alessio/Desktop/T4C Course/corso/class 3/data")
# Step 1: Load the dataset
pottery<-read.csv(file="data/pottery.csv", header = TRUE, sep = ",")
getwd
getwd()
# Step 1: Load the dataset
pottery<-read.csv(file="/Users/alessio/Desktop/T4C Course/corso/class 3/data/pottery.csv", header = TRUE, sep = ",")
setwd("/Users/alessio/Desktop/T4C Course/corso/class 3/data")
pottery<-read.csv(file="/data/pottery.csv", header = TRUE, sep = ",")
pottery<-read.csv(file="data/pottery.csv", header = TRUE, sep = ",")
pottery<-read.csv(file="PCA/pottery.csv", header = TRUE, sep = ",")
rm(pottery)
# Step 1: Load the dataset
pottery<-read.csv(file="PCA/pottery.csv", header = TRUE, sep = ",")
pottery<-read.csv(file="PCA/pottery.csv", header = TRUE, sep = ",")
setwd("~/Desktop/T4C Course/corso/class 3")
rm(pottery)
# Step 1: Load the dataset
pottery<-read.csv(file="/Users/alessio/Desktop/T4C Course/corso/class 3/data/PCA/pottery.csv", header = TRUE, sep = ",")
# Step2: Piers correlation between independent variables
library(psych)
pairs.panels(pottery[,4:12], gap = 0, bg = c("red", "yellow", "blue")[pottery$Region],pch=21)
cor_matrix <- cor(pottery[,4:12], use = "complete.obs")
View(cor_matrix)
print(cor_matrix)
print(cor_matrix)
ggcorrplot(cor_matrix, method = "circle", type = "lower", lab = TRUE)
library(ggcorrplot)
install.packages("ggcorrplot")
library(ggcorrplot)
ggcorrplot(cor_matrix, method = "circle", type = "lower", lab = TRUE)
ggcorrplot(cor_matrix, method = "square", type = "upper", lab = TRUE,
lab_size = 3, outline.col = "white", colors = c("blue", "white", "red"),
title = "Correlation Matrix", ggtheme = theme_minimal())
?ggcorplot
??ggcorplot
ggcorrplot(cor_matrix, method = "square", type = "full", lab = TRUE,
lab_size = 3, outline.col = "white", colors = c("blue", "white", "red"),
title = "Correlation Matrix", ggtheme = theme_minimal())
ggcorrplot(cor_matrix, method = "circle", type = "upper", lab = TRUE,
lab_size = 3, outline.col = "white", colors = c("blue", "white", "red"),
title = "Correlation Matrix", ggtheme = theme_minimal())
# Step2: Piers correlation between independent variables
cor_matrix <- cor(pottery[,4:12], use = "complete.obs")
print(cor_matrix) #explore the output
#plot the correlation as a heatmap
library(ggcorrplot)# load the package, install it if you do not have it
ggcorrplot(cor_matrix, method = "circle", type = "upper", lab = TRUE,
+            lab_size = 3, outline.col = "white", colors = c("blue", "white", "red"),
ggcorrplot(cor_matrix, method = "circle", type = "upper", lab = TRUE,
+            lab_size = 3, outline.col = "white", colors = c("blue", "white", "red"),
# Step2: Piers correlation between independent variables
cor_matrix <- cor(pottery[,4:12], use = "complete.obs")
print(cor_matrix) #explore the output
??cor_matrix
??cor
?cor
ggcorrplot(cor_matrix, method = "circle", type = "upper", lab = TRUE,
+            lab_size = 3, outline.col = "white", colors = c("blue", "white", "red"),
View(cor_matrix)
ggcorrplot(cor_matrix, method = "square", type = "upper", lab = TRUE,
lab_size = 3, outline.col = "white", colors = c("blue", "white", "red"),
title = "Correlation Matrix", ggtheme = theme_minimal())
ggcorrplot(cor_matrix, method = "circle", type = "upper", lab = TRUE,
lab_size = 3, outline.col = "white", colors = c("blue", "white", "red"),
title = "Correlation Matrix", ggtheme = theme_minimal())
ggcorrplot(cor_matrix, method = "circle", type = "upper", lab = TRUE,
+            lab_size = 3, outline.col = "white", colors = c("blue", "white", "red"),
ggcorrplot(cor_matrix, method = "circle", type = "upper", lab = TRUE, lab_size = 3, outline.col = "white", colors = c("blue", "white", "red"),title = "Correlation Matrix", ggtheme = theme_minimal())
#Plot the correlation as a heatmap
ggcorrplot(cor_matrix, method = "circle", type = "upper", lab = TRUE, lab_size = 3, outline.col = "white", colors = c("blue", "white", "red"),title = "Correlation Matrix", ggtheme = theme_minimal())
#Plot the correlation as a heatmap
ggcorrplot(cor_matrix, method = "circle", type = "upper", lab = TRUE, lab_size = 3, outline.col = "white", colors = c("blue", "white", "red"),title = "Correlation Matrix", ggtheme = theme_minimal())
?prcomp()
View(cor_matrix)
View(cor_matrix)
View(pottery)
pca_result <- prcomp(pottery[,4:12], center = TRUE, scale. = FALSE)
summary(pca_result)
plot(pca_result, type = "l", main = "Scree Plot")
biplot(pca_result, scale = 0)
pca_scores <- as.data.frame(pca_result$x)
pca_scores$Region <- pottery$Region
library(ggplot2)
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Region)) +
geom_point(size = 3) +
theme_minimal() +
ggtitle("PCA: Roman pottery")
View(pottery)
View(pottery)
rowsum(pottery)
?rowsum
sum(pottery[1,4:12])
summary(pca_result)  # View variance explained by components
summary(pca_result%rotation)  # View the loadings of each variable
summary(pca_result$rotation)  # View the loadings of each variable
print(pca_result$rotation)  # View the loadings of each variable
print(pca_result)
summary(pca_result)
sqrt(pca_result$rotation)
?sqrt
sqrt(2)
sqrt(4)
sqrt^2
2^2
pca_result$rotations^2
pca_result$rotation^2
0.48^2
pca_result$rotation^2
# Step 4: Visualize PCA Results
# Scree Plot (Explained Variance)
plot(pca_result, type = "l", main = "Scree Plot")
sum(pca_result$rotation)
pca_result$rotation
# Step5:Biplot to visualize PCA components
biplot(pca_result, scale = 0)
biplot(pca_result, scale = 0)
*biplot()
?biplot
biplot(pca_result)
biplot(pca_result, scale = 0.4)
biplot(pca_result, scale = 0.8)
biplot(pca_result, scale = 0)
biplot(pca_result)
biplot(pca_result, scale = 0)
biplot(pca_result)
?pca_result
?prcomp
pca_result <- prcomp(pottery[,4:12], center = FALSE, scale. = FALSE)
print(pca_result$rotation)
summary(pca_result)
plot(pca_result, type = "l", main = "Scree Plot")
biplot(pca_result, scale = 0)
pca_result <- prcomp(pottery[,4:12], scale. = FALSE)
pca_result <- prcomp(pottery[,4:12], scale. = FALSE)
summary(pca_result)
pca_result <- prcomp(pottery[,4:12], scale. = FALSE)
print(pca_result$rotation)
# Step 4: Visualize PCA Results
# Scree Plot (Explained Variance)
plot(pca_result, type = "l", main = "Scree Plot")
# Step 4: Visualize PCA Results
# Scree Plot (Explained Variance)
plot(pca_result, type = "l", main = "Scree Plot")
# Step5:Biplot to visualize PCA components
biplot(pca_result, scale = 0)
pca_result <- prcomp(pottery[,4:12], center=TRUE, scale. = TRUE)
print(pca_result$rotation)
pca_result$rotation^2
summary(pca_result)
# Step 4: Visualize PCA Results
# Scree Plot (Explained Variance)
plot(pca_result, type = "l", main = "Scree Plot")
biplot(pca_result, scale = 0)
library(ggplot2)
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Region)) +
geom_point(size = 3) +
theme_minimal() +
ggtitle("PCA: Roman pottery")
pca_result <- prcomp(pottery[,4:12], center=TRUE, scale. = FALSE)
library(ggplot2)
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Region)) +
geom_point(size = 3) +
theme_minimal() +
ggtitle("PCA: Roman pottery")
pca_scores <- as.data.frame(pca_result$x)
pca_scores$Region <- pottery$Region  # Assuming "Type" is a categorical variable like pottery style
library(ggplot2)
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Region)) +
geom_point(size = 3) +
theme_minimal() +
ggtitle("PCA: Roman pottery")
pca_result <- prcomp(pottery[,4:12], center=TRUE, scale. = TRUE)
pca_scores <- as.data.frame(pca_result$x)
pca_scores$Region <- pottery$Region  # Assuming "Type" is a categorical variable like pottery style
# Scatterplot of PC1 vs PC2
library(ggplot2)
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Region)) +
geom_point(size = 3) +
theme_minimal() +
ggtitle("PCA: Roman pottery")
print(pca_result$rotation)  # View the loadings of each variable
pca_result$rotation^2
# Step 4: Visualize PCA Results
# Scree Plot (Explained Variance)
plot(pca_result, type = "l", main = "Scree Plot")
# Step 3: Perform PCA
pca_result <- prcomp(pottery[,4:12], center=TRUE, scale. = FALSE)
print(pca_result$rotation)  # View the loadings of each variable
pca_result$rotation^2
summary(pca_result)
# Step 4: Visualize PCA Results
# Scree Plot (Explained Variance)
plot(pca_result, type = "l", main = "Scree Plot")
# Step 6: Create a PCA DataFrame for ggplot
pca_scores <- as.data.frame(pca_result$x)
pca_scores$Region <- pottery$Region  # Assuming "Type" is a categorical variable like pottery style
# Scatterplot of PC1 vs PC2
library(ggplot2)
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Region)) +
geom_point(size = 3) +
theme_minimal() +
ggtitle("PCA: Roman pottery")
knitr::opts_chunk$set(echo = TRUE)
library(sf) #load the package
uk <- st_read("/Users/alessio/Desktop/T4C Course/corso/class 3/data/linear_regression/uk.shp")
sites<-st_read("/Users/alessio/Desktop/T4C Course/corso/class 3/data/linear_regression/sites.shp")
oxford<-st_read("/Users/alessio/Desktop/T4C Course/corso/class 3/data/linear_regression/oxford.shp")
newforest<-st_read("/Users/alessio/Desktop/T4C Course/corso/class 3/data/linear_regression/newforest.shp")
plot(st_geometry(uk), col="grey75", border=NA)
points(st_coordinates(sites), pch=19, cex=0.3)
points(st_coordinates(newforest), col="green", pch=15)
points(st_coordinates(oxford), col="red", pch=15)
plot(st_geometry(uk), col="grey75", border=NA,  xlim=c(300000, 650000), ylim=c(50000, 500000))
points(st_coordinates(sites), pch=19, cex=0.3)
points(st_coordinates(newforest), col="green", pch=15)
points(st_coordinates(oxford), col="red", pch=15)
summary(sites)
plot(st_geometry(uk), col="grey75", border=NA,  xlim=c(300000, 650000), ylim=c(50000, 500000))
points(st_coordinates(sites[sites$oxpots >= 0 & sites$oxpots <= 5,]), pch=16, cex=0.3)
points(st_coordinates(sites[sites$oxpots >= 5 & sites$oxpots <= 10,]), pch=16, cex=0.6)
points(st_coordinates(sites[sites$oxpots >= 10 & sites$oxpots <= 15,]), pch=16, cex=0.9)
points(st_coordinates(sites[sites$oxpots >= 15 & sites$oxpots <= 20,]), pch=16, cex=1.5)
points(st_coordinates(sites[sites$oxpots >= 20 & sites$oxpots <= 25,]), pch=16, cex=2)
points(st_coordinates(oxford), col="red", pch=15)
plot(st_geometry(uk), col="grey75", border=NA,  xlim=c(300000, 650000), ylim=c(50000, 500000))
points(st_coordinates(sites[sites$nfpots >= 0 & sites$nfpots <= 5,]), pch=16, cex=0.3)
points(st_coordinates(sites[sites$nfpots >= 5 & sites$nfpots <= 10,]), pch=16, cex=0.6)
points(st_coordinates(sites[sites$nfpots >= 10 & sites$nfpots <= 15,]), pch=16, cex=0.9)
points(st_coordinates(sites[sites$nfpots >= 15 & sites$nfpots <= 20,]), pch=16, cex=1.5)
points(st_coordinates(sites[sites$nfpots >= 20 & sites$nfpots <= 25,]), pch=16, cex=2)
points(st_coordinates(newforest), col="green", pch=15)
coord<- rbind(st_coordinates(sites),st_coordinates(newforest),st_coordinates(oxford))
dist_matr<- as.matrix(dist(coord))
sites$distox <- dist_matr[32,1:30]
sites$distnf <- dist_matr[31,1:30]
summary(sites$distox)
plot(st_geometry(uk), col="grey75", border=NA,  xlim=c(300000, 650000), ylim=c(50000, 500000))
points(st_coordinates(sites[sites$distox >= 0 & sites$distox <= 25,]), pch=16, cex=0.3)
points(st_coordinates(sites[sites$distox >= 25 & sites$distox <= 50,]), pch=16, cex=0.6)
points(st_coordinates(sites[sites$distox >= 50 & sites$distox <= 100,]), pch=16, cex=0.9)
points(st_coordinates(sites[sites$distox >= 150 & sites$distox <= 200,]), pch=16, cex=1.5)
points(st_coordinates(sites[sites$distox >200,]), pch=16, cex=2)
points(st_coordinates(oxford), col="red", pch=15)
summary(sites$distnf)
plot(st_geometry(uk), col="grey75", border=NA,  xlim=c(300000, 650000), ylim=c(50000, 500000))
points(st_coordinates(sites[sites$distnf >= 0 & sites$distnf <= 25,]), pch=16, cex=0.3)
points(st_coordinates(sites[sites$distnf >= 25 & sites$distnf <= 50,]), pch=16, cex=0.6)
points(st_coordinates(sites[sites$distnf >= 50 & sites$distnf <= 100,]), pch=16, cex=0.9)
points(st_coordinates(sites[sites$distnf >= 150 & sites$distnf <= 200,]), pch=16, cex=1.5)
points(st_coordinates(sites[sites$distnf >200,]), pch=16, cex=2)
points(st_coordinates(newforest), col="green", pch=15)
plot(sites$distox,sites$oxpots, pch=16)
lregr <- lm(sites$oxpots ~ sites$distox)
plot(sites$distox,sites$oxpots, main="Linear regression", xlab = "distance from Oxford (km)",  ylab="Oxford Pottery (percentage)", pch=16)
abline(lregr, col="red")
summary(lregr)
sites$sr <- residuals(lregr) / 5.693
plot(sites$distox,sites$sr, pch=16)
plot(sites$distox[sites$transport==TRUE],sites$sr[sites$transport == TRUE], ylab="St. Residuals", xlab="River link", ylim = c(-2,2), pch=16)
plot(sites$distox[sites$transport==FALSE],sites$sr[sites$transport == FALSE], ylab="St. Residuals", xlab="No River link", ylim = c(-2,2), pch=16)
t.regdata <- sites[sites$transport==TRUE,]
nt.regdata <- sites[sites$transport==FALSE,]
lregr.t <- lm(oxpots~distox, data=t.regdata)
lregr.nt <- lm(oxpots~distox, data=nt.regdata)
summary(lregr.t)
summary(lregr.nt)
total <- residuals(lregr)
transport <- residuals(lregr.t)
no_transport <- residuals(lregr.nt)
boxplot(total,transport,no_transport, names=c("total","river","no river"))
plot(sites$distox,sites$oxpots, pch=16)
points(t.regdata$distox,t.regdata$oxpots,col="blue",pch=16)
points(nt.regdata$distox,nt.regdata$oxpots,col="brown",pch=16)
abline(lregr,lty="dashed",col="black")
abline(lregr.t,col="blue")
abline(lregr.nt,col="brown")
data<-read.csv(file="/Users/alessio/Desktop/T4C Course/corso/class 3/data/chi-square test/settlements_soil.csv", header = TRUE, sep=",")
data
# Total number of settlements
total_settlements <- sum(data[,2:3])
# Row totals (for each soil type)
row_totals <- rowSums(data[,2:3])
# Column totals (Rural and Urban settlements)
col_totals <- colSums(data[,2:3])
# Compute expected frequencies
expected <- outer(row_totals, col_totals) / total_settlements
# Print the expected frequencies
expected
# Perform Chi-Square Test
chi_square_test <- chisq.test(data[,2:3])
# Print the Chi-Square Test results
chi_square_test
# Step 1: Load the dataset
pottery<-read.csv(file="/Users/alessio/Desktop/T4C Course/corso/class 3/data/PCA/pottery.csv", header = TRUE, sep = ",")
# Step2: Piers correlation between independent variables
cor_matrix <- cor(pottery[,4:12], use = "complete.obs")
print(cor_matrix) #explore the output
#Plot the correlation as a heatmap
library(ggcorrplot)
ggcorrplot(cor_matrix, method = "circle", type = "upper", lab = TRUE, lab_size = 3, outline.col = "white", colors = c("blue", "white", "red"),title = "Correlation Matrix", ggtheme = theme_minimal())
# Step 3: Perform PCA
pca_result <- prcomp(pottery[,4:12], center=TRUE, scale. = FALSE)
print(pca_result$rotation)  # View the loadings of each variable
pca_result$rotation^2
summary(pca_result)
# Step 4: Visualize PCA Results
# Scree Plot (Explained Variance)
plot(pca_result, type = "l", main = "Scree Plot")
# Step5:Biplot to visualize PCA components
biplot(pca_result, scale = 0)
# Step 6: Create a PCA DataFrame for ggplot
pca_scores <- as.data.frame(pca_result$x)
pca_scores$Region <- pottery$Region  # add the column "Region" as a categorical variable
pca_scores$Id <- pottery$Id # add the column "Id"
# Scatterplot of PC1 vs PC2
library(ggplot2)
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Region)) +
geom_point(size = 3) +
geom_text(aes(label = Id), vjust = -1, size = 4)
theme_minimal()
uk <- st_read("/Users/alessio/Desktop/T4C Course/corso/class 3/data/PCA/uk.shp")
sites<-st_read("/Users/alessio/Desktop/T4C Course/corso/class 3/data/PCA/sites.shp")
plot(st_geometry(uk), col="grey75", border=NA,  xlim=c(-6, 1), ylim=c(50, 55))
points(st_coordinates(sites), col = as.factor(sites$region), pch = 19, cex = 1.3) # add sites coloured by region
text(st_coordinates(sites), labels = sites$name, pos = 2, cex = 0.5, col = "black") #add labels
legend("topright", legend = c("Gloucester", "New Forest","Wales"), col = c("black","pink","green"), pch = 16, title = "Region")
plot(st_geometry(uk), col="grey75", border=NA,  xlim=c(-6, 1), ylim=c(50, 55))
points(st_coordinates(sites), col = as.factor(sites$region), pch = 19, cex = 1.3) # add sites coloured by region
text(st_coordinates(sites), labels = sites$name, pos = 2, cex = 0.5, col = "black") #add labels
legend("topright", legend = c("Gloucester", "New Forest","Wales"), col = c("black","pink","green"), pch = 16, title = "Region")
