chisq.test(Neo$Freq, p = expected_freq / sum(expected_freq))
.Table <- matrix(c(29,14,11,33), 2, 2, byrow=TRUE)
rownames(.Table) <- c('RHS', 'LHS')
colnames(.Table) <- c('M', 'F')
.Table
chisq.test(.Table)
expected_freq <- c(19.8, 23.2, 20.2, 23.8)
chisq.test(.Table, p=expected_freq)
expected_freq <- c(19.8, 20.2, 23.2, 23.8)
chisq.test(.Table, p=p = expected_freq / sum(expected_freq))
chisq.test(.Table, p = expected_freq / sum(expected_freq))
names(dimnames(.Table)) <- list("Side", "Sex")
M
.Table
addmargins(.Table)
Table <- matrix(c(29,14,11,33), 2, 2, byrow=TRUE)
View(Table)
rownames(.Table) <- c('RHS', 'LHS')
colnames(.Table) <- c('M', 'F')
View(Table)
rownames(Table) <- c('RHS', 'LHS')
colnames(Table) <- c('M', 'F')
names(dimnames(Table)) <- list("Side", "Sex")
addmargins(.Table)
addmargins(Table)
View(Table)
Table
View(Table)
Table
addmargins(Table)
chisq.test(Table)
library(vcd)
install.packages("vcd")
library(vcd)
assocstats(.Table)
.Table <- matrix(c(29,14,11,33), 2, 2, byrow=TRUE)
rownames(.Table) <- c('RHS', 'LHS')
colnames(.Table) <- c('M', 'F')
names(dimnames(.Table)) <- list("Side", "Sex")
addmargins(.Table)
.Table
chisq.test(Table)
result <- chisq.test(Table)
result
result$expected
print(result$expected)
YulesQ <- function(x) {(x[1,1]*x[2,2]-x[1,2]*x[2,1])/
(x[1,1]*x[2,2]+x[1,2]*x[2,1])}
View(YulesQ)
47+26
GPit<-array(c(17, 29, 4, 6, 5, 4, 43, 20), dim=c(2, 2, 2), dimnames =
list(Sex=c("Male", "Female"), 'Grave Volume'=c("<1.5 m3",">1.5 m3"), 'Est
Height'=c("<1.55 m",">1.55 m")))
GPit
SxGV <- ftable(GPit, row.vars="Sex", col.vars="Grave Volume")
SxGV
assocstats(SxGV)
YulesQ(SxGV)
ftable(GPit,row.vars=c("Est Height","Sex"),col.vars="Grave Volume")
ftable(GPit,row.vars=c("Est Height","Sex"),col.vars="Grave Volume")
18+30+4+3
73+55
13.4+11.5+16.2+13.9
(55*22)/128
55*22
sqrt(22)
sqrt(7.5)
sqrt(5)
sqrt(64)
sem <- std(varname)/sqrt(length(varname))
hist(sapply(1:200, function(x) mean(sample(1:6, 2, replace=TRUE))))
sample()
sample(help)
help(sample)
sample(2)
sample(1:6,2)
sample(1:6,2)
sample(1:6,2, replace=TRUE)
sample(1:6,2, replace=TRUE)
sample(1:6,2, replace=TRUE)
sample(1:6,2, replace=TRUE)
sample(1:6,2, replace=TRUE)
sample(1:6,2, replace=TRUE)
sample(1:6,2, replace=TRUE)
sample(1:6,2, replace=TRUE)
sample(1:6,2, replace=FALSE)
sample(1:6,2, replace=FALSE)
sample(1:6,2, replace=FALSE)
sample(1:6,2, replace=FALSE)
sample(1:6,2, replace=TRUE)
sample(1:6,2, replace=TRUE)
sample(1:6,2, replace=TRUE)
sample(1:6,2, replace=TRUE)
sample(1:6,2, replace=TRUE)
sample(1:6,2, replace=TRUE)
sample(1:6,2, replace=TRUE)
sample(1:6,2, replace=TRUE)
sample(1:6,2, replace=TRUE)
mean(sample(1:6,2, replace=TRUE))
mean(sample(1:6,2, replace=TRUE))
mean(sample(1:6,2, replace=TRUE))
mean(sample(1:6,2, replace=TRUE))
mean(sample(1:6,2, replace=TRUE))
mean(sample(1:6,2, replace=TRUE))
mean(sample(1:6,2, replace=TRUE))
mean(sample(1:6,2, replace=TRUE))
hist(sapply(1:200, function(x) mean(sample(1:6, 2, replace=TRUE))))
sapply(1:200, function(x) mean(sample(1:6, 2, replace=TRUE)))
sapply(1:200, mean(sample(1:6, 2, replace=TRUE))
)
hist(sapply(1:200, function(x) mean(sample(1:6, 2, replace=TRUE))))
hist(sapply(1:200, function(x) mean(sample(1:6, 2, replace=TRUE))))
hist(sapply(1:200, function(x) mean(sample(1:6, 2, replace=TRUE))))
hist(sapply(1:200, function(x) mean(sample(1:6, 15, replace=TRUE))))
hist(sapply(1:200, function(x) mean(sample(1:6, 15, replace=TRUE))))
hist(sapply(1:200, function(x) mean(sample(1:6, 15, replace=TRUE))))
hist(sapply(1:200, function(x) mean(sample(1:6, 15, replace=TRUE))))
hist(sapply(1:200, function(x) mean(sample(1:6, 5, replace=TRUE))))
hist(sapply(1:200, function(x) mean(sample(1:6, 5, replace=TRUE))))
hist(sapply(1:200, function(x) mean(sample(1:6, 5, replace=TRUE))))
hist(sapply(1:200, function(x) mean(sample(1:6, 5, replace=TRUE))))
plot(0:10, rep(0,11), ylim=c(-2,2), type="l")
for (i in 1:9) {
n <- 15
13
s <- rnorm(n)
m <- mean(s)
se <- sd(s)/sqrt(n)
points(i, m)
lines(c(i, i), c(m-1.96*se, m+1.96*se))
}
par(op)
par(op)
op <- par(mfrow=c(2, 3))
op
curve(1*x, 0, 2, ylim=c(0, 4))
curve(2*x, 0, 2, ylim=c(0, 4))
curve(x^2, 0, 2, ylim=c(0, 4))
curve(sqrt(x), 0, 2, ylim=c(0, 4))
curve(-x+2, 0, 2, ylim=c(0, 4))
curve(-2*x+4, 0, 2, ylim=c(0, 4))
par(op)
log(500)
log(100)
log(10)
help(log)
log10(10)
log10(500)
log10(8)
log10(6)
3.4 - (0.055*15)
3.4 - (0.055*20)
3.4 - (0.055*50)
sqr(0.839)
sqrt(0.839)
sqrt(0.40)
sqrt(25)
sqrt(40)
sqrt(83)
0.83*0.83
log(5.01)
log10(5.01)
Obsidian <- data.frame(Distance=c(5, 12, 17, 25, 31, 36, 44, 49, 56, 63, 75),
Density=c(5.01, 1.91, 1.91, 2.24, 1.20, 1.10, 0.447, 0.347, 0.239, 0.186, 0.126))
View(Obsidian)
ser<-sqrt(sum(Obsidian$residuals.RegModel.2^2)/11)
Obsidian<-data.frame(Obsidian,StdRes=scale(Obsidian$residuals.RegModel.2,0,ser))
0.864*0.832
GPit<-array(c(18, 30, 4, 6, 4, 3, 43, 20), dim=c(2, 2, 2), dimnames =
list(Sex=c("Male", "Female"), 'Grave Volume'=c("<1.5 m3",">1.5 m3"), 'Est
Height'=c("<1.55 m",">1.55 m")))
ftable(GPit,row.vars=c("Est Height","Sex"),col.vars="Grave Volume")
Neo<-data.frame(Soil=c("Rendzina","Alluvium","Brown earth"),Freq=c(26,9,18))
Neo$Soil <- factor(Neo$Soil, c("Rendzina","Alluvium","Brown earth"))
View(Neo)
expected_freq <- c(17, 13.2, 22.8)
chisq.test(Neo$Freq, p = expected_freq / sum(expected_freq))
3/5
3/4
0.6+0.75
(0.6+0.75)/2
Cluster <- data.frame(group=factor(c(rep(1,6),rep(2,6),rep(3,6))),
x=c(54,40,52,41,48,46,61,68,56,59,57,61,42,56,48,58,47,47),
y=c(92,95,94,90,85,97,70,67,64,63,78,69,58,49,51,42,42,55))
View(Cluster)
sqrt(0.74)
sqrt(11.332)
3.3*3.3
sqrt(2.51)
2.52/3.36
2.52*2.52
6.3/3.66
0.56*0.56
0.74*0.74
7.4/12
2.05/12
install.packages("ca")
library(ca)
data <- matrix(c(
40, 15, 30, 15,  # North
10, 35, 10, 45,  # South
30, 20, 40, 10,  # East
20, 25, 20, 35   # West
), nrow = 4, byrow = TRUE)
rownames(data) <- c("North", "South", "East", "West")
colnames(data) <- c("Apples", "Oranges", "Bananas", "Grapes")
View(data)
ca_result <- ca(data)
View(ca_result)
summary(ca_result)
help(ca)
plot(ca_result,
main = "Correspondence Analysis of Region and Fruit Preferences",
xlab = "Dimension 1",
ylab = "Dimension 2",
col = c("blue", "orange"))
st<-(1+2)
st
st<-c(1,2)
st
class(st)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
library(rgdal)
knitr::opts_chunk$set(echo = TRUE)
library(rgdal)
knitr::opts_chunk$set(echo = TRUE)
library(rgdal)
test<-1+3
test<-1+3
test<-1+3
test
test<-1+3
test
test<-1+3
test
test<-1+3
test<-1+3
test<-1+3
test
n <- 30   # Total graves
p <- 0.4  # Prob
k_values <- 0:30  # Possible adult counts from 0 to 30
probabilities <- dbinom(k_values, size = n, prob = p)
probabilities
distribution_table <- data.frame(Adults = k_values, Probability = probabilities)
View(distribution_table)
print(distribution_table)
barplot(probabilities, names.arg = k_values, col = "blue",
main = "Binomial Distribution of Adult Burials",
xlab = "Number of Adult Burials", ylab = "Probability")
barplot(probabilities)
cdf_values <- pbinom(k_values, size = n, prob = p)
plot(k_values, cdf_values, type = "s", col = "red", lwd = 2,
main = "Cumulative Probability (CDF)",
xlab = "Number of Adult Burials", ylab = "Cumulative Probability")
$dbinom
?dbinom
knitr::opts_chunk$set(echo = TRUE)
# Parameters
n <- 30   # Total graves
p <- 0.4  # Probability of adult burial
# Compute binomial distribution for different values of k (number of adult burials)
k_values <- 0:30  # Possible adult counts from 0 to 30
probabilities <- dbinom(k_values, size = n, prob = p)
# Create a table of values
distribution_table <- data.frame(Adults = k_values, Probability = probabilities)
# Plot the binomial distribution
barplot(probabilities, names.arg = k_values,
main = "Binomial Distribution of Adult Burials",
xlab = "Number of Adult Burials", ylab = "Probability")
30*0.4
# Compute CDF (Cumulative Distribution Function)
cdf_values <- pbinom(k_values, size = n, prob = p)
# Plot CDF
plot(ecdf(cdf_values), verticals=TRUE, do.points=FALSE)
# Compute CDF (Cumulative Distribution Function)
cdf_values <- pbinom(k_values, size = n, prob = p)
# Plot CDF
plot(k_values, cdf_values, type = "s", col = "red", lwd = 2,
main = "Cumulative Probability (CDF)",
xlab = "Number of Adult Burials", ylab = "Cumulative Probability")
E(X)<-30*0.40
E<-30*0.40
E<-30*0.40
E<-30*0.40
lambda <- 5  # Average number of sites per km^2
k_values <- 0:15  # Possible number of sites (you can adjust this range)
# Compute PMF (Probability Mass Function) for each k
pmf_values <- dpois(k_values, lambda)
pmf_values
lambda <- 5  # Average number of sites per km^2
k_values <- 0:20  # Possible number of sites (you can adjust this range)
# Compute PMF (Probability Mass Function) for each k
pmf_values <- dpois(k_values, lambda)
pmf_values
# Compute CDF (Cumulative Distribution Function) for each k
cdf_values <- ppois(k_values, lambda)
par(mfrow = c(1, 2))
barplot(pmf_values, names.arg = k_values, col = "blue",
main = "Poisson PMF: Number of Sites",
xlab = "Number of Sites", ylab = "Probability")
plot(k_values, cdf_values, type = "s", col = "red", lwd = 2,
main = "Cumulative Probability (CDF)",
xlab = "Number of Sites", ylab = "Cumulative Probability")
# Parameters
lambda <- 5  # Average number of sites per km^2
k_values <- 0:20  # Possible number of sites found within a 1 km square
# Compute PMF (Probability Mass Function) for each k
pmf_values <- dpois(k_values, lambda)
# Compute CDF (Cumulative Distribution Function) for each k
cdf_values <- ppois(k_values, lambda)
# Plot PMF (Bar chart)
barplot(pmf_values, names.arg = k_values,
main = "Poisson PMF: Number of Sites",
xlab = "Number of Sites", ylab = "Probability")
# Plot CDF (Step line chart)
plot(k_values, cdf_values, type = "s", col = "red", lwd = 2,
main = "Cumulative Probability (CDF)",
xlab = "Number of Sites", ylab = "Cumulative Probability")
0.8*20
7*16
pmf_values
0.0067 x 20
0.0067 * 20
0.175 * 20
data <- c(3, 7, 2, 10, 5)
# Plot ECDF
plot(ecdf(data),
main="Empirical Cumulative Distribution Function (ECDF)",
xlab="Data Value",
ylab="Cumulative Probability",
col="blue",
pch=19)
# Add grid lines
grid()
n <- 10    # Number of trials
p <- 0.5   # Probability of success (getting heads)
k <- 6     # Maximum number of successes
# Cumulative probability: P(X ≤ k)
cumulative_prob <- pbinom(k, size = n, prob = p)
# Print result
print(cumulative_prob)
# Parameters
n <- 10    # Number of trials
p <- 0.5   # Probability of success (getting heads)
# Create a sequence of k values (0 to 10)
k_values <- 0:n
# Compute cumulative probabilities for each k
cumulative_probs <- pbinom(k_values, size = n, prob = p)
# Plot the cumulative probability distribution
plot(k_values, cumulative_probs, type = "s", col = "blue", lwd = 2,
xlab = "Number of Heads (k)", ylab = "Cumulative Probability P(X ≤ k)",
main = "Cumulative Probability Distribution of Binomial(10, 0.5)")
# Add points for better visualization
points(k_values, cumulative_probs, pch = 19, col = "red")
# Parameters
n <- 10    # Number of trials
p <- 0.5   # Probability of success (getting heads)
# Create a sequence of k values (0 to 10)
k_values <- 0:n
# Compute probability mass function (PMF)
pmf_probs <- dbinom(k_values, size = n, prob = p)
# Plot the PMF as a bar plot
barplot(pmf_probs, names.arg = k_values, col = "skyblue",
xlab = "Number of Heads (k)", ylab = "Probability P(X = k)",
main = "Binomial Probability Mass Function (n = 10, p = 0.5)")
# Add points to highlight the probabilities
points(k_values + 1, pmf_probs, pch = 19, col = "red")
# Parameters
n <- 10    # Number of trials
p <- 0.5   # Probability of success (getting heads)
# Create a sequence of k values (0 to 10)
k_values <- 0:n
# Compute probability mass function (PMF)
pmf_probs <- dbinom(k_values, size = n, prob = p)
# Plot the PMF as a bar plot
barplot(pmf_probs, names.arg = k_values, col = "skyblue",
xlab = "Number of Heads (k)", ylab = "Probability P(X = k)",
main = "Binomial Probability Mass Function (n = 10, p = 0.5)")
7*6*5*4*3*2*1
# Parameters
lambda <- 5   # Average number of artifacts per 10m²
# Create a sequence of k values (from 0 to 10)
k_values <- 0:10
# Compute Poisson probabilities for each k (from 0 to 10)
poisson_probs <- dpois(k_values, lambda = lambda)
# Plot the Poisson distribution as a bar plot
barplot(poisson_probs, names.arg = k_values, col = "lightblue",
xlab = "Number of Artifacts (k)", ylab = "Probability P(X = k)",
main = paste("Poisson Distribution for Artifacts (λ =", lambda, ")"))
lambda <- 5   # Average number of artifacts per 10m²
# Create a sequence of k values (from 0 to 10)
k_values <- 0:10
# Compute cumulative Poisson probabilities for each k (from 0 to 10)
cumulative_probs <- ppois(k_values, lambda = lambda)
# Plot the cumulative Poisson distribution as a step plot
plot(k_values, cumulative_probs, type = "s", col = "blue", lwd = 2,
xlab = "Number of Artifacts (k)", ylab = "Cumulative Probability P(X ≤ k)",
main = paste("Cumulative Poisson Distribution for Artifacts (λ =", lambda, ")"))
# Add points to better visualize each step
points(k_values, cumulative_probs, pch = 19, col = "red")
data(iris)
View(iris)
iris_numeric <- iris[, 1:4]
iris_scaled <- scale(iris_numeric)
View(iris)
View(iris_numeric)
iris_scaled
?scale
pca_result <- prcomp(iris_scaled, center = TRUE, scale. = TRUE)
summary(pca_result)
library(ggplot2)
plot(pca_result, type = "l", main = "Scree Plot")
pca_df <- as.data.frame(pca_result$x)
pca_df$Species <- iris$Species
ggplot(pca_df, aes(x = PC1, y = PC2, color = Species)) +
geom_point(size = 3) +
theme_minimal() +
ggtitle("PCA: Iris Dataset")
(43*40)/87
((29-19.8)^2)/19.8
((14-23.2)^2)/23.2
((26-17)^2)/17
setwd("/Users/alessio/Documents/didattica/INSEGNAMENTI/PhD/T4C/Quantifying Culture/class 3/data")
library(sf) #loa
uk <- st_read("linear_regression/uk.shp")
uk <- st_read("linear_regression/sites.shp")
uk <- st_read("linear_regression/oxford.shp")
uk <- st_read("linear_regression/newforest.shp")
plot(st_geometry(uk), col="grey75", border=NA)
points(st_coordinates(sites), pch=19, cex=0.3)
sites <- st_read("linear_regression/sites.shp")
oxford <- st_read("linear_regression/oxford.shp")
newforest <- st_read("linear_regression/newforest.shp")
plot(st_geometry(uk), col="grey75", border=NA)
points(st_coordinates(sites), pch=19, cex=0.3)
points(st_coordinates(newforest), col="green", pch=15)
points(st_coordinates(oxford), col="red", pch=15)
plot(st_geometry(uk), col="grey75", border=NA)
points(st_coordinates(sites), pch=19, cex=0.3)
points(st_coordinates(newforest), col="green", pch=15)
points(st_coordinates(oxford), col="red", pch=15)
plot(st_geometry(uk), col="grey75", border=NA)
plot(st_geometry(uk), col="grey75", border=NA)
uk <- st_read("linear_regression/uk.shp")
plot(st_geometry(uk), col="grey75", border=NA)
plot(st_geometry(uk), col="grey75", border=NA)
points(st_coordinates(sites), pch=19, cex=0.3)
points(st_coordinates(newforest), col="green", pch=15)
points(st_coordinates(oxford), col="red", pch=15)
plot(st_geometry(uk), col="grey75", border=NA,  xlim=c(300000, 650000), ylim=c(50000, 500000))
points(st_coordinates(sites), pch=19, cex=0.3)
points(st_coordinates(newforest), col="green", pch=15)
points(st_coordinates(oxford), col="red", pch=15)
View(sites)
plot(st_geometry(uk), col="grey75", border=NA,  xlim=c(300000, 650000), ylim=c(50000, 500000))
points(st_coordinates(sites[sites$oxpots >= 0 & sites$oxpots <= 5,]), pch=16, cex=0.3)
points(st_coordinates(sites[sites$oxpots >= 5 & sites$oxpots <= 10,]), pch=16, cex=0.6)
points(st_coordinates(sites[sites$oxpots >= 10 & sites$oxpots <= 15,]), pch=16, cex=0.9)
points(st_coordinates(sites[sites$oxpots >= 15 & sites$oxpots <= 20,]), pch=16, cex=1.5)
points(st_coordinates(sites[sites$oxpots >= 20 & sites$oxpots <= 25,]), pch=16, cex=2)
points(st_coordinates(oxford), col="red", pch=15)
plot(st_geometry(uk), col="grey75", border=NA,  xlim=c(300000, 650000), ylim=c(50000, 500000))
points(st_coordinates(sites[sites$nfpots >= 0 & sites$nfpots <= 5,]), pch=16, cex=0.3)
points(st_coordinates(sites[sites$nfpots >= 5 & sites$nfpots <= 10,]), pch=16, cex=0.6)
points(st_coordinates(sites[sites$nfpots >= 10 & sites$nfpots <= 15,]), pch=16, cex=0.9)
points(st_coordinates(sites[sites$nfpots >= 15 & sites$nfpots <= 20,]), pch=16, cex=1.5)
points(st_coordinates(sites[sites$nfpots >= 20 & sites$nfpots <= 25,]), pch=16, cex=2)
points(st_coordinates(newforest), col="green", pch=15)
coord<- rbind(st_coordinates(sites),st_coordinates(newforest),st_coordinates(oxford))
dist_matr<- as.matrix(dist(coord))
sites$distox <- dist_matr[32,1:30]
sites$distnf <- dist_matr[31,1:30]
sites$distox <- sites$distox / 1000
sites$distnf <- sites$distnf / 1000
View(dist_matr)
summary(sites$distox)
plot(st_geometry(uk), col="grey75", border=NA,  xlim=c(300000, 650000), ylim=c(50000, 500000))
points(st_coordinates(sites[sites$distox >= 0 & sites$distox <= 25,]), pch=16, cex=0.3)
points(st_coordinates(sites[sites$distox >= 25 & sites$distox <= 50,]), pch=16, cex=0.6)
points(st_coordinates(sites[sites$distox >= 50 & sites$distox <= 100,]), pch=16, cex=0.9)
points(st_coordinates(sites[sites$distox >= 150 & sites$distox <= 200,]), pch=16, cex=1.5)
points(st_coordinates(sites[sites$distox >200,]), pch=16, cex=2)
points(st_coordinates(oxford), col="red", pch=15)
plot(sites$distox,sites$oxpots, pch=16)
lregr <- lm(sites$oxpots ~ sites$distox)
cor(sites$oxpots,sites$distox)
plot(sites$distox,sites$oxpots, main="Linear regression", xlab = "distance from Oxford (km)",  ylab="Oxford Pottery (percentage)", pch=16)
abline(lregr, col="red")
summary(lregr)
sites$sr <- residuals(lregr) / 5.693
plot(sites$distox,sites$sr, pch=16)
plot(sites$distox[sites$transport==TRUE],sites$sr[sites$transport == TRUE], ylab="St. Residuals", xlab="River link", ylim = c(-2,2), pch=16)
plot(sites$distox[sites$transport==FALSE],sites$sr[sites$transport == FALSE], ylab="St. Residuals", xlab="No River link", ylim = c(-2,2), pch=16)
t.regdata <- sites[sites$transport==TRUE,]
nt.regdata <- sites[sites$transport==FALSE,]
lregr.t <- lm(oxpots~distox, data=t.regdata)
lregr.nt <- lm(oxpots~distox, data=nt.regdata)
summary(lregr.t)
summary(lregr.nt)
total <- residuals(lregr)
transport <- residuals(lregr.t)
no_transport <- residuals(lregr.nt)
boxplot(total,transport,no_transport, names=c("total","river","no river"))
plot(sites$distox,sites$oxpots, pch=16)
points(t.regdata$distox,t.regdata$oxpots,col="blue",pch=16)
points(nt.regdata$distox,nt.regdata$oxpots,col="brown",pch=16)
abline(lregr,lty="dashed",col="black")
abline(lregr.t,col="blue")
abline(lregr.nt,col="brown")
